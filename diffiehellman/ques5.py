from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
import hashlib, os

SECRET = b'crypto{????????????????????????????}'

def generate_key(shared_secret):
    """Generate a 16-byte AES key from the shared secret."""
    hash_obj = hashlib.sha1()
    hash_obj.update(str(shared_secret).encode('utf-8'))
    return hash_obj.digest()[:16]

def encrypt_secret(shared_secret):
    """Encrypt the secret using the shared secret."""
    key = generate_key(shared_secret)
    iv = os.urandom(16)
    cipher = AES.new(key, AES.MODE_CBC, iv)
    encrypted = cipher.encrypt(pad(SECRET, 16))
    return {'iv': iv.hex(), 'ciphertext': encrypted.hex()}

def validate_padding(data):
    """Check if the data has valid PKCS#7 padding."""
    pad_len = data[-1]
    return all(byte == pad_len for byte in data[-pad_len:])

def decrypt_secret(shared_secret, iv_hex, ciphertext_hex):
    """Decrypt the ciphertext using the shared secret."""
    key = generate_key(shared_secret)
    iv = bytes.fromhex(iv_hex)
    ciphertext = bytes.fromhex(ciphertext_hex)
    cipher = AES.new(key, AES.MODE_CBC, iv)
    decrypted = cipher.decrypt(ciphertext)
    return unpad(decrypted, 16).decode('utf-8') if validate_padding(decrypted) else decrypted.decode('utf-8')

# Simulate Diffie-Hellman key exchange
generator = 2
prime_modulus = 2410312426921032588552076022197566074856950548502459942654116941958108831682612228890093858261341614673227141477904012196503648957050582631942730706805009223062734745341073406696246014589361659774041027169249453200378729434170325843778659198143763193776859869524088940195577346119843545301547043747207749969763750084308926339295559968882457872412993810129130294592999947926365264059284647209730384947211681434464714438488520940127459844288859336526896320919633919
public_key = 112218739139542908880564359534373424013016249772931962692237907571990334483528877513809272625610512061159061737608547288558662879685086684299624481742865016924065000555267977830144740364467977206555914781236397216033805882207640219686011643468275165718132888489024688846101943642459655423609111976363316080620471928236879737944217503462265615774774318986375878440978819238346077908864116156831874695817477772477121232820827728424890845769152726027520772901423784
private_key = 197395083814907028991785772714920885908249341925650951555219049411298436217190605190824934787336279228785809783531814507661385111220639329358048196339626065676869119737979175531770768861808581110311903548567424039264485661330995221907803300824165469977099494284722831845653985392791480264712091293580274947132480402319812110462641143884577706335859190668240694680261160210609506891842793868297672619625924001403035676872189455767944077542198064499486164431451944

shared_secret = pow(public_key, private_key, prime_modulus)

# Provided IV and ciphertext
iv_hex = "737561146ff8194f45290f5766ed6aba"
ciphertext_hex = "39c99bf2f0c14678d6a5416faef954b5893c316fc3c48622ba1fd6a9fe85f3dc72a29c394cf4bc8aff6a7b21cae8e12c"

# Decrypt the secret
print(decrypt_secret(shared_secret, iv_hex, ciphertext_hex))